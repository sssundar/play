Sushant Sundaresh
Learning C from the Problem Sets of CS24, Caltech
Last Revised on 23 October 2015
--------------------------------------------------------------------------------

Problem Set 1, Part 1, Problem 2
--------------------------------

Question:
	One way to count the set bits in an integer is to bitshift & mask. 
	Another way is to use the following map: n = n & (n-1)
	Why does this work?

Answer:

Play with 8 bit numbers. 

0 & 255 = 0 (has 0 1s)

1 & 0 = 0 (has 1 1s) 
2 & 1 = 0 (has 1 1s)
3 & 2 = 2 (has 2 1s)
4 & 3 = 0 (has 1 1s)
5 & 4 = 4 (has 1 1s)
6 & 5 = 4 (has 2 1s)
7 & 6 = 6 (has 3 1s)
8 & 7 = 0 (has 1 1s)

Ok, so a positive integer with 3 set bits takes 3 iterations to map to 0.
0 is a special case but we have to check for that, for termination, anyways.

Is this better than shifts & masks?

Well, with shifts & masks we have to do 8 shifts no matter what. 
We have one bit shift, one mask, one comparison, one branch, and one increment,
per iteration.

With this method, we have to compute n-1, n & n-1, compare it to 0, and branch,
incrementing.

I don't see that this saved us any instructions. It is faster on average, but
the worst case cost is the same. 